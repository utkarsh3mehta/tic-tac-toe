{"version":3,"sources":["assets/images/logo.svg","component/Blocks/Blocks.css","container/App.css","component/ScoreKeeper/ScoreKeeper.css","component/Blocks/Block/Block.js","component/Blocks/Blocks.js","component/ScoreKeeper/ScoreKeeper.js","component/UI/Modal/Modal.js","component/MaxScore/MaxScore.js","container/App.js","serviceWorker.js","redux/reducer/reducer.js","redux/store.js","index.js","component/Blocks/Block/Block.css","component/UI/Modal/Modal.css"],"names":["module","exports","Block","props","hiflag","btn","status","flag","lastcol","className","styles","RightMost","onClick","clicked","row","col","Blocks","rows","Object","keys","lastrow","length","cols","blocks","map","rowid","block","colid","key","blockClicked","ScoreKeeper","style","score","player","Modal","backdrop","modal","winner","success","playAgain","Maxscore","onChange","changed","value","max","type","min","required","App","score_keeper","bool","scoreX","addx","clearFieldHandler","setState","scoreO","addo","maxscorehandler","event","target","rowChecker","oldFlag","state","values","reduce","val","el","colChecker","colLength","rowLength","colWinner","colArr","concat","prev","now","diagonalChecker","diagLeft","diagRight","colleftid","colrightid","checkWinner","resetStatHandler","turn","reset","blockClickHandler","prevState","colval","row0","col0","col1","col2","row1","row2","this","Header","src","logo","Logo","alt","AppButton","Component","connect","dispatch","Boolean","window","location","hostname","match","initialState","Reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78c5fb6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blocks\":\"Blocks__Blocks__3Jm9s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__Mnxqh\",\"Logo\":\"App__Logo__3DSsS\",\"Header\":\"App__Header__1Yf--\",\"AppButton\":\"App__AppButton__3Z0wk\",\"Link\":\"App__Link__T7nQ2\",\"ScoreKeeper\":\"App__ScoreKeeper__rp-qo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ScoreKeeper\":\"ScoreKeeper__ScoreKeeper__XQLff\"};","import React from 'react';\r\nimport styles from './Block.css';\r\nconst Block = (props) => {\r\n    let hiflag = null;\r\n    let btn = null;\r\n    let status = false;\r\n    if(props.flag === 'x') {\r\n        hiflag = 'X';\r\n    }\r\n    else if(props.flag === 'o') {\r\n        hiflag = 'O';\r\n    }\r\n    else {\r\n        hiflag = '';\r\n        status = true;\r\n    }\r\n\r\n    if (props.lastcol) {\r\n        btn = status ? <button \r\n        className={styles.RightMost} \r\n        onClick={() => props.clicked(props.row, props.col)}>\r\n            {hiflag}\r\n        </button> : <button \r\n        className={styles.RightMost}>\r\n            {hiflag}\r\n        </button>\r\n    }\r\n    else {\r\n        btn = status ? <button \r\n        onClick={() => props.clicked(props.row, props.col)}>\r\n            {hiflag}\r\n        </button> : <button>\r\n            {hiflag}\r\n        </button>\r\n    }\r\n\r\n    return <span className={styles.Block}>\r\n        {btn}\r\n    </span>\r\n}\r\nexport default Block;","import React from 'react';\r\nimport Block from './Block/Block';\r\nimport styles from './Blocks.css';\r\nconst Blocks = (props) => {\r\n    let rows = Object.keys(props.flag)\r\n    let lastrow = rows[rows.length - 1];\r\n    let cols = Object.keys(props.flag[lastrow])\r\n    let lastcol = cols[cols.length - 1]\r\n    let blocks = Object.keys(props.flag).map(rowid => {\r\n        let block = Object.keys(props.flag[rowid]).map(colid => {\r\n            if (colid === lastcol) {\r\n                return <Block \r\n                key={'block'+rowid+colid} \r\n                flag={props.flag[rowid][colid]}\r\n                row={rowid} col={colid}\r\n                lastcol\r\n                clicked={props.blockClicked} />\r\n            } else {\r\n                return <Block \r\n                key={'block'+rowid+colid} \r\n                flag={props.flag[rowid][colid]}\r\n                row={rowid} col={colid}\r\n                clicked={props.blockClicked} />\r\n            }\r\n        })\r\n        if(rowid === lastrow) {\r\n            return [block, <br key={'newline' + rowid} />]\r\n        }  else {\r\n            return [block, <hr key={'newline' + rowid} />]\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={styles.Blocks}>\r\n            {blocks}\r\n        </div>\r\n    )\r\n}\r\nexport default Blocks;","import React from 'react'\r\nimport styles from './ScoreKeeper.css'\r\nconst ScoreKeeper = (props) => {\r\n    let style = null\r\n    if(props.score === 4) {\r\n        style = {\r\n            'color': 'green'\r\n        }\r\n    }\r\n    return (\r\n        <strong style={style} className={styles.ScoreKeeper}>{props.player}: {props.score}</strong>\r\n    )\r\n}\r\nexport default ScoreKeeper","import React from 'react'\r\nimport styles from './Modal.css'\r\nconst Modal = (props) => {\r\n    return (\r\n        <div className={styles.backdrop}>\r\n            <div className={styles.modal}>\r\n                <p>And the winner is:</p>\r\n                <strong>{props.winner}</strong><br />\r\n                <button className={styles.success} onClick={props.playAgain}>Play Again</button>\r\n            </div>\r\n        </div>\r\n    )    \r\n}\r\nexport default Modal;","import React from 'react'\r\nconst Maxscore = (props) => {\r\n    return (\r\n        <input onChange={props.changed} value={props.max} type=\"number\" max='10' min='3' required />\r\n    )\r\n}\r\nexport default Maxscore","import React, { Component } from 'react';\r\nimport logo from '../assets/images/logo.svg';\r\nimport styles from './App.css';\r\nimport Blocks from '../component/Blocks/Blocks';\r\nimport { connect } from 'react-redux'\r\nimport ScoreKeeper from '../component/ScoreKeeper/ScoreKeeper';\r\nimport Modal from '../component/UI/Modal/Modal';\r\nimport Maxscore from '../component/MaxScore/MaxScore';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      turn: false,\r\n      winner: null,\r\n      max: 5,\r\n      flag: {\r\n        row0 : {\r\n          col0: null,\r\n          col1: null,\r\n          col2: null,\r\n        },\r\n        row1: {\r\n          col0: null,\r\n          col1: null,\r\n          col2: null,\r\n        },\r\n        row2: {\r\n          col0: null,\r\n          col1: null,\r\n          col2: null,\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  score_keeper = bool => {\r\n    // console.log(this.props.score)\r\n    if(bool) {\r\n      if(this.props.scoreX < 4) {\r\n        this.props.addx()\r\n        this.clearFieldHandler()\r\n      } else {\r\n        // console.log('in else block')\r\n        this.setState({\r\n          winner: 'x',\r\n        })\r\n      }\r\n    } else {\r\n      if(this.props.scoreO < 4) {\r\n        this.props.addo()\r\n        this.clearFieldHandler()\r\n      } else {\r\n        // console.log('in else block')\r\n        this.setState({\r\n          winner: 'o',\r\n        })\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  maxscorehandler = (event) => {\r\n    this.setState({\r\n      max: event.target.value,\r\n    })\r\n    //console.log(this.state.max)\r\n    return null\r\n  }\r\n\r\n  rowChecker = () => {\r\n    // console.log('running rowChecker');\r\n    let oldFlag = {...this.state.flag}\r\n    let rowWinner = Object.keys(oldFlag).map(rowid => {\r\n      let row = Object.values(oldFlag[rowid]).reduce((val, el) => {\r\n        //console.log(val, el)\r\n        if(val !== null) {\r\n          if(val === el) {\r\n            return val;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n      if(row !== false) {\r\n        if(row === 'x') {\r\n          return 'x';\r\n        } else if(row === 'o') {\r\n          return 'o';\r\n        } else {\r\n          return null\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    })\r\n    // console.log(rowWinner)\r\n    rowWinner.map(row => {\r\n      if (row === 'x') {\r\n         this.score_keeper(true)\r\n      } \r\n      else if(row === 'o') {\r\n        this.score_keeper(false)\r\n      }\r\n      return null;\r\n    })\r\n  }\r\n\r\n  colChecker = () => {\r\n    // console.log('running colChecker');\r\n    let oldFlag = {...this.state.flag}\r\n    let rowLength = Object.keys(oldFlag).length;\r\n    let colLength\r\n    Object.keys(oldFlag).map(rowid => {\r\n      colLength = Object.keys(oldFlag[rowid]).length\r\n      return null\r\n    })\r\n    //console.log(rowLength, colLength)\r\n    let colWinner = [];\r\n    for(let col = 0; col < colLength; col++) {\r\n      let colid = 'col'+col\r\n      let colArr = [];\r\n      for(let row = 0; row < rowLength; row++) {\r\n        let rowid = 'row'+row\r\n        // console.log()\r\n        colArr = colArr.concat(oldFlag[rowid][colid])\r\n      }\r\n      // console.log(colArr);\r\n      colWinner = colWinner.concat(colArr.reduce((prev, now) => {\r\n        if(prev === now) {\r\n          return prev;\r\n        } else {\r\n          return false;\r\n        }\r\n      }))\r\n    }\r\n    // console.log(colWinner)\r\n    colWinner.map(col => {\r\n      if (col === 'x') {\r\n        this.score_keeper(true)\r\n      } \r\n      else if(col === 'o') {\r\n        this.score_keeper(false)\r\n      }\r\n      return null;\r\n    })\r\n  }\r\n\r\n  diagonalChecker = () => {\r\n    let oldFlag = {...this.state.flag}\r\n    let diagLeft = [], diagRight = []\r\n    let rowLength = Object.keys(oldFlag).length\r\n    let colLength\r\n    Object.keys(oldFlag).map(rowid => {\r\n      colLength =  Object.keys(oldFlag[rowid]).length\r\n      return null\r\n    })\r\n    for (let row = 0, col = colLength-1; row < rowLength, col >= 0; row++, col--) {\r\n      let rowid = 'row'+row\r\n      let colleftid = 'col'+row\r\n      let colrightid = 'col'+col\r\n      diagLeft = diagLeft.concat(oldFlag[rowid][colleftid])\r\n      diagRight = diagRight.concat(oldFlag[rowid][colrightid])\r\n    }\r\n    diagLeft = diagLeft.reduce((prev, now) => {\r\n      if (prev === now) {\r\n        return prev\r\n      } else {\r\n        return false\r\n      }\r\n    })\r\n    diagRight = diagRight.reduce((prev, now) => {\r\n      if (prev === now) {\r\n        return prev\r\n      } else {\r\n        return false\r\n      }\r\n    })\r\n    // console.log(diagLeft, diagRight)\r\n    if(diagLeft === 'x') {\r\n      this.score_keeper(true)\r\n    } else if (diagLeft === 'o') {\r\n      this.score_keeper(false)\r\n    }\r\n    if(diagRight === 'x') {\r\n      this.score_keeper(true)\r\n    } else if (diagRight === 'o') {\r\n      this.score_keeper(false)\r\n    }\r\n  }\r\n\r\n  checkWinner = () => {\r\n    // console.log('running other functions')\r\n    this.rowChecker()\r\n    this.colChecker()\r\n    this.diagonalChecker()\r\n  }\r\n\r\n  clearFieldHandler = () => {\r\n    let oldFlag = {...this.state.flag}\r\n    Object.keys(oldFlag).map(rowid => {\r\n      return Object.keys(oldFlag[rowid]).map(colid => {\r\n        //console.log(rowid, colid);\r\n        oldFlag[rowid][colid] = null;\r\n        return oldFlag;\r\n      })\r\n    })\r\n    //console.log(newFlag);\r\n    this.setState({\r\n      flag: oldFlag,\r\n      winner: null,\r\n    })\r\n  }\r\n\r\n  resetStatHandler = () => {\r\n    this.clearFieldHandler()\r\n    this.setState({\r\n      turn: false,\r\n      winner: null,\r\n    })\r\n    this.props.reset()\r\n  }\r\n\r\n  blockClickHandler = (row, col) => {\r\n    let oldFlag = {...this.state.flag}\r\n    if(this.state.turn) {\r\n      oldFlag[row][col]  = 'o';\r\n    } else {\r\n      oldFlag[row][col] = 'x';\r\n    }\r\n    this.setState(prevState => {\r\n      return {\r\n        flag: oldFlag,\r\n        turn: !prevState.turn,\r\n      }\r\n    });\r\n    this.checkWinner()\r\n    // clear blocks when all are full\r\n    let clear_blocks = false\r\n    clear_blocks = Object.keys(this.state.flag).map(rowid => {\r\n      return Object.values(this.state.flag[rowid]).map(colval => {\r\n        if(colval !== null) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      }).reduce((val, el) => {\r\n        if(val&&el) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    }).reduce((val, el) => {\r\n      if(val&&el) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    })\r\n    if(clear_blocks) {\r\n      this.clearFieldHandler()\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className={styles.App}>\r\n        {this.state.winner !== null ? <Modal \r\n        winner={this.state.winner} \r\n        playAgain={()=>this.resetStatHandler()}/> : null}\r\n        <div className={styles.Header}>\r\n          <img src={logo} className={styles.Logo} alt=\"logo\"/>\r\n          <Maxscore  changed={this.maxscorehandler} max={this.state.max} />\r\n          <div className={styles.ScoreKeeper} >\r\n            <ScoreKeeper score={this.props.scoreX} player=\"X\" />&nbsp;v/s&nbsp;<ScoreKeeper score={this.props.scoreO} player=\"O\" />\r\n          </div>\r\n          <div>\r\n            <button className={styles.AppButton} onClick={this.clearFieldHandler}>Clear Fields</button>\r\n            <button className={styles.AppButton} onClick={this.resetStatHandler}>Reset Stats</button>\r\n          </div>\r\n          <Blocks flag={this.state.flag} blockClicked={this.blockClickHandler} />\r\n          {/* <div className={styles.SideRules}>\r\n            <p>Rules:</p>\r\n            <ul><li>First game is started by 'X'</li></ul>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    scoreX: state.scoreX,\r\n    scoreO: state.scoreO\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addx: () => dispatch({type: 'ADD_X'}),\r\n    addo: () => dispatch({type: 'ADD_O'}),\r\n    reset: () => dispatch({type: 'RESET'})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    scoreX: 0,\r\n    scoreO: 0,\r\n}\r\n\r\nconst Reducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_X':\r\n            return {\r\n                ...state,\r\n                scoreX: state.scoreX + 1\r\n            }\r\n        case 'ADD_O':\r\n            return {\r\n                ...state,\r\n                scoreO: state.scoreO + 1\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state,\r\n                scoreX: 0,\r\n                scoreO: 0,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Reducer","import { createStore } from 'redux'\r\nimport Reducer from './reducer/reducer'\r\nconst store = createStore(Reducer)\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Block\":\"Block__Block__2Tgop\",\"RightMost\":\"Block__RightMost__n_YjJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal__backdrop__oQRaY\",\"modal\":\"Modal__modal__1pYMt\",\"success\":\"Modal__success__oK8Fj\",\"danger\":\"Modal__danger__1bjGW\"};"],"sourceRoot":""}